/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ovs;

import javax.swing.JOptionPane;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.io.IOException;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.xml.sax.SAXException;

/**
 * File Name: CarInventory.java
 * Person Programmer: Steven Passynkov 
 * Date: 11 Oct 2024 
 * Description: Program add cars to XML file and allow to search cars using XPath
 */
public class CarInventory extends javax.swing.JFrame {

    // vehicle file name
    static String xmlFile = "vehicle_data.xml";

    /**
     * Creates new form CarInventory
     */
    public CarInventory() {
        initComponents();
    }

    /**
     * Create new xml element with name and value and add to parent
     *
     * @param doc XML document
     * @param parent Parent
     * @param name name
     * @param value value
     */
    private void addCarElement(Document doc, Element parent, String name, String value) {
        // create car element with name
        Element el = doc.createElement(name);
        // add text node with value
        el.appendChild(doc.createTextNode(value));
        // add element to parent
        parent.appendChild(el);
    }

    /**
     * Validate if car exit with the same VIN
     *
     * @param vin vin number
     * @return True if exist, otherwise false
     */
    private boolean validateIfCarExist(String vin) throws SAXException, XPathExpressionException, IOException, ParserConfigurationException {
        // create file with xmlFile name
        File xmlFile = new File(CarInventory.xmlFile);

        // if file does not exist - no check
        if (!xmlFile.exists()) {
            return false;
        }

        // get instance of DocumentBuilderFactory
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        // create builder
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        // parse xml file
        Document doc = dBuilder.parse(xmlFile);
        // get root elemnt 
        doc.getDocumentElement().normalize();

        // XPathFactory instance
        XPathFactory xpathFactory = XPathFactory.newInstance();
        //create new xpath
        XPath xpath = xpathFactory.newXPath();
        // start buiding xpath expression for Vehicle nodes
        StringBuilder exp = new StringBuilder("//Vehicle[");
        // search by VIN
        exp.append("contains(VIN, '").append(vin).append("')");
        // close ex
        exp.append("]");

        // compile xpath expression
        XPathExpression xPathExpression = xpath.compile(exp.toString());
        // evauate expression for vehicle document
        NodeList vehicleNodes = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);

        // if found 
        if (vehicleNodes.getLength() > 0) {
            // return true
            return true;
        } else {
            // return false
            return false;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        yearInput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        companyInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        styleInput = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        colorInput = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        mileageInput = new javax.swing.JTextField();
        newXMLBtn = new javax.swing.JButton();
        unitDropdown = new javax.swing.JComboBox<>();
        openXMLBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        vinInput = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Year:");

        jLabel2.setText("Company:");

        jLabel3.setText("Style:");

        jLabel4.setText("Color:");

        jLabel5.setText("Mileage:");

        newXMLBtn.setText("Add to XML file");
        newXMLBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newXMLBtnActionPerformed(evt);
            }
        });

        unitDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kilometers", "Miles" }));

        openXMLBtn.setText("Search XML");
        openXMLBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openXMLBtnActionPerformed(evt);
            }
        });

        jLabel6.setText("VIN:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(newXMLBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(37, 37, 37)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(companyInput)
                                .addComponent(yearInput)
                                .addComponent(vinInput)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(mileageInput, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(unitDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(colorInput)
                                .addComponent(styleInput))))
                    .addComponent(openXMLBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(98, 98, 98))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(vinInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(companyInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(styleInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mileageInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(unitDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(newXMLBtn)
                .addGap(18, 18, 18)
                .addComponent(openXMLBtn)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newXMLBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newXMLBtnActionPerformed
        // get vin from input
        String vin = vinInput.getText().trim();
        // get year from input
        String year = yearInput.getText().trim();
        // get company from input
        String company = companyInput.getText().trim();
        // get style from input
        String style = styleInput.getText().trim();
        // get color from input
        String color = colorInput.getText().trim();
        // get mileage from input
        String mileage = mileageInput.getText().trim();
        // get unit from input
        String unit = unitDropdown.getSelectedItem().toString();

        // vin should not be empty - show error
        if (vin.isEmpty()) {
            JOptionPane.showMessageDialog(this, "VIN is required!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // vin should - 17 chars, upper case letters from A - H, J t- N, and P t- Z (but I, O, and Q), and digits 0-9
        // https://en.wikipedia.org/wiki/Vehicle_identification_number
        if (!vin.matches("[A-HJ-NPR-Z0-9]{17}")) {
            JOptionPane.showMessageDialog(this, "VIN must be 17 characters and can include letters (A-H, J-N, P-R, S-Z) and numbers (0-9)!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // year should not be empty
        if (year.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Year is required!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            // parse year to int
            int yearInt = Integer.parseInt(year);
            // check that year between 1886 and current
            int currentYear = java.util.Calendar.getInstance().get(java.util.Calendar.YEAR);
            if (yearInt < 1886 || yearInt > currentYear) {
                JOptionPane.showMessageDialog(this, "Enter a valid year (between 1886 and " + currentYear + ")!", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            // handle parse int exception
            JOptionPane.showMessageDialog(this, "Year must be a number!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // company should not be empty
        if (company.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Company name is required!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // company should be just letters
        if (!company.matches("[a-zA-Z ]+")) {
            JOptionPane.showMessageDialog(this, "Company name cannot contain numbers or special characters!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // style should not be empty
        if (style.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Style is required!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // color should not be empty
        if (color.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Color is required!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // mileage should not be empty
        if (mileage.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Mileage is required!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // parse mileage to double
        try {
            Double.parseDouble(mileage);
        } catch (NumberFormatException e) {
            // handle parse double exception
            JOptionPane.showMessageDialog(this, "Mileage must be a number!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // unit should not be empty
        if (unit.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a unit for mileage!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {

            // check if vin already exist
            if (this.validateIfCarExist(vin)) {
                JOptionPane.showMessageDialog(this, "Car with this VIN already exist!", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // create file with xmlFile name
            File xmlFile = new File(CarInventory.xmlFile);

            // get instance of DocumentBuilderFactory
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            // create builder
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            // Ref to doc - either exist ot new
            Document doc;

            if (xmlFile.exists()) {
                // parse xml file
                doc = dBuilder.parse(xmlFile);
                // get root element
                doc.getDocumentElement().normalize();
            } else {
                // create new doc
                doc = dBuilder.newDocument();
                // add root Vehicles node
                Element rootElement = doc.createElement("Vehicles");
                // append it to doc
                doc.appendChild(rootElement);
            }

            // create root element for Vehicle
            Element vehicleElement = doc.createElement("Vehicle");

            // add VIN element
            addCarElement(doc, vehicleElement, "VIN", vin);
            // add Year element
            addCarElement(doc, vehicleElement, "Year", year);
            // add Company element
            addCarElement(doc, vehicleElement, "Company", company);
            // add Style element
            addCarElement(doc, vehicleElement, "Style", style);
            // add color element
            addCarElement(doc, vehicleElement, "Color", color);
            // add Mileage element
            addCarElement(doc, vehicleElement, "Mileage", mileage + " " + unit);
            // add vehicleElement to doc
            doc.getDocumentElement().appendChild(vehicleElement);

            // write the content into xml file
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            // makes sure the XML file is formatted nicely with indentation
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            // makes sure the XML file is formatted nicely with indent space of 4 
            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");

            // Create a new input source with a DOM node.
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(xmlFile);
            // transform from source to file
            transformer.transform(source, result);

            JOptionPane.showMessageDialog(this, "XML file updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            // show stack error
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error creating or updating XML file!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_newXMLBtnActionPerformed

    private void openXMLBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openXMLBtnActionPerformed
        // get vin from input
        String vin = vinInput.getText().trim();
        // get year from input
        String year = yearInput.getText().trim();
        // get company from input
        String company = companyInput.getText().trim();
        // get style from input
        String style = styleInput.getText().trim();
        // get color from input
        String color = colorInput.getText().trim();
        // get mileage from input
        String mileage = mileageInput.getText().trim();
        // get unit from input
        String unit = unitDropdown.getSelectedItem().toString();

        try {
            // create file handler with xmlFile name
            File xmlFile = new File(CarInventory.xmlFile);

            // if no file - can't search
            if (!xmlFile.exists()) {
                JOptionPane.showMessageDialog(this, "File " + CarInventory.xmlFile + " not found!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // get instance of DocumentBuilderFactory
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            // create builder
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            // parse xml file
            Document doc = dBuilder.parse(xmlFile);
            // get root elemnt 
            doc.getDocumentElement().normalize();

            // XPathFactory instance
            XPathFactory xpathFactory = XPathFactory.newInstance();
            //create new xpath
            XPath xpath = xpathFactory.newXPath();
            // start buiding xpath expression for Vehicle nodes
            StringBuilder exp = new StringBuilder("//Vehicle[");

            // if first condiction?
            boolean isFirst = true;

            // if vin -add
            if (!vin.isEmpty()) {
                // add contains exp for VIN
                exp.append("contains(VIN, '").append(vin).append("')");
                // not first
                isFirst = false;
            }
            // if year -add
            if (!year.isEmpty()) {
                // concat with "and" 
                if (!isFirst) {
                    exp.append(" and ");
                }
                // add contains exp for Year
                exp.append("contains(Year, '").append(year).append("')");
                // not first
                isFirst = false;
            }
            // if company -add
            if (!company.isEmpty()) {
                // concat with "and" 
                if (!isFirst) {
                    exp.append(" and ");
                }
                // add contains exp for Company
                exp.append("contains(Company, '").append(company).append("')");
                // not first
                isFirst = false;
            }
            // if style -add
            if (!style.isEmpty()) {
                // concat with "and" 
                if (!isFirst) {
                    exp.append(" and ");
                }
                // add contains exp for Style
                exp.append("contains(Style, '").append(style).append("')");
                // not first
                isFirst = false;
            }
            // if color -add
            if (!color.isEmpty()) {
                // concat with "and" 
                if (!isFirst) {
                    exp.append(" and ");
                }
                // add contains exp for Color
                exp.append("contains(Color, '").append(color).append("')");
                // not first
                isFirst = false;
            }
            // if style -mileage 
            if (!mileage.isEmpty()) {
                // concat with "and" 
                if (!isFirst) {
                    exp.append(" and ");
                }
                // add contains exp for Mileage and add unit
                exp.append("contains(Mileage, '").append(mileage).append(" ").append(unit).append("')");
            }
            // close bracket
            exp.append("]");

            // compile xpath expression
            XPathExpression xPathExpression = xpath.compile(exp.toString());
            // evauate expression for vehicle document
            NodeList vehicleNodes = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);

            // Found more than 0
            if (vehicleNodes.getLength() > 0) {

                // Create StringBuilder to print details
                StringBuilder result = new StringBuilder("Found Vehicles:\n");
                // add xpath expression
                result.append("Xpath: " + exp + "\n\n");

                // iterate over vehicleNodes
                for (int i = 0; i < vehicleNodes.getLength(); i++) {
                    // get xml node
                    Node vehicleNode = vehicleNodes.item(i);
                    // cast node to element
                    Element vehicleElement = (Element) vehicleNode;

                    // get VIN element and its text node
                    String vehicleVin = vehicleElement.getElementsByTagName("VIN").item(0).getTextContent();
                    // get Year element and its text node
                    String vehicleYear = vehicleElement.getElementsByTagName("Year").item(0).getTextContent();
                    // get Company element and its text node
                    String vehicleCompany = vehicleElement.getElementsByTagName("Company").item(0).getTextContent();
                    // get Style element and its text node
                    String vehicleStyle = vehicleElement.getElementsByTagName("Style").item(0).getTextContent();
                    // get Color element and its text node
                    String vehicleColor = vehicleElement.getElementsByTagName("Color").item(0).getTextContent();
                    // get Mileage element and its text node
                    String vehicleMileage = vehicleElement.getElementsByTagName("Mileage").item(0).getTextContent();

                    // add string with vehicle details
                    result.append(String.format("VIN: %s\nYear: %s\nCompany: %s\nStyle: %s\nColor: %s\nMileage: %s\n\n",
                            vehicleVin, vehicleYear, vehicleCompany, vehicleStyle, vehicleColor, vehicleMileage));
                }

                // show messages with details
                JOptionPane.showMessageDialog(this, result.toString(), "Search Results", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // no found 
                JOptionPane.showMessageDialog(this, "No vehicle found with the specified criteria!", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (IOException e) {
            // print  error stack
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error opening file!", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            // print  error stack
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Unexpected error occurred!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_openXMLBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CarInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CarInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CarInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CarInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CarInventory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField colorInput;
    private javax.swing.JTextField companyInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField mileageInput;
    private javax.swing.JButton newXMLBtn;
    private javax.swing.JButton openXMLBtn;
    private javax.swing.JTextField styleInput;
    private javax.swing.JComboBox<String> unitDropdown;
    private javax.swing.JTextField vinInput;
    private javax.swing.JTextField yearInput;
    // End of variables declaration//GEN-END:variables
}
