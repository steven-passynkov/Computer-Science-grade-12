package ovs;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import javax.swing.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.File;
import java.io.BufferedWriter;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.text.ParseException;
import java.util.Date;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Collections;

/**
 * File Name:	EmployeeRecordApplication 
 * Programmer:	Steven Passynkov 
 * Date:	22 Jul 2024 
 * Description:	T his Swing application manage employee list and save
 * it to cvs file
 */
public class EmployeeRecordApplication extends javax.swing.JFrame {

    // date format month/data/year
    private static String pattern = "MM/dd/yyyy";
    // Create parser for date pattern
    private static DateFormat df = new SimpleDateFormat(pattern);
    // Next id for record to add
    private static int nextId;
    // File name to save employees
    private static String fileName = "data.csv";

    /**
     * Creates new form EmployeeRecordApplication
     */
    public EmployeeRecordApplication() {
        // init swing components
        initComponents();
        // read data from file to init table
        populateDataTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        employeeTable = new javax.swing.JTable();
        searchSelect = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        searchValue = new javax.swing.JTextField();
        clearBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        addFirstNameInput = new javax.swing.JTextField();
        addMiddleNameInput = new javax.swing.JTextField();
        addLastNameInput = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        addCountryInput = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        addStateInput = new javax.swing.JTextField();
        resetAddBtn = new javax.swing.JButton();
        addEmplyeeBtn = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        addSalaryInput = new javax.swing.JTextField();
        addAddressLine2Input = new javax.swing.JTextField();
        addAddressLine1Input = new javax.swing.JTextField();
        addPositionInput = new javax.swing.JTextField();
        addBonuseInput = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        addCurrencyInput = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        addZipInput = new javax.swing.JTextField();
        addJobTypeInput = new javax.swing.JTextField();
        addDob = new com.toedter.calendar.JDateChooser();
        jPanel5 = new javax.swing.JPanel();
        editEmployeeIdInput = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        editFirstNameInput = new javax.swing.JTextField();
        editMiddleNameInput = new javax.swing.JTextField();
        editLastNameInput = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        editStateInput = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        editAddressLine1Input = new javax.swing.JTextField();
        deleteEmplyeeBtn = new javax.swing.JButton();
        updateEmployeeBtn = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        editSalaryInput = new javax.swing.JTextField();
        editZipInput = new javax.swing.JTextField();
        editAddressLine2Input = new javax.swing.JTextField();
        editPositionInput = new javax.swing.JTextField();
        editBonuseInput = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        editCurrencyInput = new javax.swing.JComboBox<>();
        editSearchBtn = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        editCountryInput = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        editJobTypeInput = new javax.swing.JTextField();
        editDob = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        employeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "First name", "Middle name", "Last name", "Date of birth", "State / Province", "Job type", "Position"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(employeeTable);

        searchSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a value", "First name", "Middle name", "Last name", "Date of birth", "State / Province", "Job type", "Position" }));

        jLabel16.setText("Search:");

        searchValue.setToolTipText("Enter to search");
        searchValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchValueActionPerformed(evt);
            }
        });

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        jButton1.setText("Increase Salary");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salaryIncreaseActionPerformed(evt);
            }
        });

        jButton2.setText("Count");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchValue, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(searchSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearBtn)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Emplyees", jPanel2);

        jLabel1.setText("First name:");

        jLabel2.setText("Middle name:");

        jLabel3.setText("Last name:");

        jLabel5.setText("Address line 1:");

        jLabel4.setText("Date of birth:");

        jLabel6.setText("Address line 2:");

        jLabel7.setText("Country:");

        jLabel8.setText("Zip / Postal code:");

        resetAddBtn.setText("Reset");

        addEmplyeeBtn.setText("Add Emplyee");
        addEmplyeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmplyeeBtnActionPerformed(evt);
            }
        });

        jLabel9.setText("Job type:");

        jLabel10.setText("Salary:");

        jLabel11.setText("Bonuse:");

        jLabel12.setText("Position:");

        jLabel13.setText("Currency:");

        addCurrencyInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Currency", "USD", "CAD" }));

        jLabel14.setText("State / Province:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel14)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel11))
                        .addGap(58, 58, 58)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addBonuseInput, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addCurrencyInput, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel12)
                            .addComponent(jLabel10)
                            .addComponent(jLabel4))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addPositionInput)
                            .addComponent(addZipInput)
                            .addComponent(addFirstNameInput)
                            .addComponent(addMiddleNameInput)
                            .addComponent(addLastNameInput)
                            .addComponent(addCountryInput)
                            .addComponent(addStateInput)
                            .addComponent(addAddressLine2Input)
                            .addComponent(addAddressLine1Input)
                            .addComponent(addJobTypeInput)
                            .addComponent(addSalaryInput)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(addDob, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(229, 229, 229)
                .addComponent(resetAddBtn)
                .addGap(18, 18, 18)
                .addComponent(addEmplyeeBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(addFirstNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addMiddleNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addLastNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(addDob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCountryInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addStateInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addAddressLine1Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addAddressLine2Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addZipInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(addJobTypeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(addPositionInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addSalaryInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBonuseInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCurrencyInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetAddBtn)
                    .addComponent(addEmplyeeBtn))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Add Employee", jPanel3);

        jLabel15.setText("First name:");

        jLabel17.setText("Middle name:");

        jLabel18.setText("Last name:");

        jLabel19.setText("Address line 1:");

        jLabel20.setText("Date of birth:");

        jLabel21.setText("Address line 2:");

        jLabel22.setText("State / Province:");

        jLabel23.setText("Zip / Postal code:");

        deleteEmplyeeBtn.setText("Delete Employee");
        deleteEmplyeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEmplyeeBtnActionPerformed(evt);
            }
        });

        updateEmployeeBtn.setText("Update Employee");
        updateEmployeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateEmployeeBtnActionPerformed(evt);
            }
        });

        jLabel24.setText("Job type:");

        jLabel25.setText("Salary:");

        jLabel26.setText("Bonuses:");

        jLabel27.setText("Position:");

        jLabel28.setText("Currency:");

        editCurrencyInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Currency", "USD", "CAD" }));

        editSearchBtn.setText("Search");
        editSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSearchBtnActionPerformed(evt);
            }
        });

        jLabel29.setText("Pase Emplyee id to fill out form:");

        jLabel30.setText("Country:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(deleteEmplyeeBtn)
                        .addGap(18, 18, 18)
                        .addComponent(updateEmployeeBtn))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel17)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(jLabel29)
                                        .addGap(18, 18, 18)
                                        .addComponent(editEmployeeIdInput, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(editSearchBtn))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel20))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(editMiddleNameInput)
                                    .addComponent(editFirstNameInput)
                                    .addComponent(editLastNameInput)
                                    .addComponent(editCountryInput)
                                    .addComponent(editDob, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jLabel19)
                            .addComponent(jLabel21))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editAddressLine1Input, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editStateInput, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editAddressLine2Input, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel28)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editCurrencyInput, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editZipInput, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editBonuseInput, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel27)
                                    .addComponent(jLabel25)
                                    .addComponent(jLabel24))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(editPositionInput, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                                    .addComponent(editJobTypeInput)
                                    .addComponent(editSalaryInput))))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editEmployeeIdInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editSearchBtn)
                            .addComponent(jLabel29))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(editFirstNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(editMiddleNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(editLastNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel20)
                            .addComponent(editDob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30)
                            .addComponent(editCountryInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editStateInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editAddressLine1Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editAddressLine2Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editZipInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(editJobTypeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editPositionInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel27))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editSalaryInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editBonuseInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editCurrencyInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel28))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteEmplyeeBtn)
                    .addComponent(updateEmployeeBtn))
                .addGap(20, 20, 20))
        );

        jTabbedPane1.addTab("Edit Employee", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Show # of getEmploee
     */
    private void showCount() {
        // Create list of employee from file
        ArrayList<String> employees = getEmploeys();
        // show # of employees
        JOptionPane.showMessageDialog(this, "Count:" + employees.size());
    }

    /**
     * Create list of employee from file
     *
     * @return
     */
    private ArrayList<String> getEmploeys() {
        // list of employee
        ArrayList<String> employees = new ArrayList<String>();

        // init BufferedReader
        BufferedReader reader = null;
        try {
            // create BufferedReader from fileName
            reader = new BufferedReader(new FileReader(fileName));
            // init line var
            String line;
            // get next line from file
            while ((line = reader.readLine()) != null) {
                // split line
                String[] data = line.split(",");
                String row = String.join(",", data[0], data[1], data[2],
                        data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13], data[14]);
                employees.add(row);
            }

        } catch (IOException e) {
            // catch exception
            e.printStackTrace();
            // show error
            JOptionPane.showMessageDialog(null, "Error importing table data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            // if reader in exception or just finished - close
            if (reader != null) {
                try {
                    // close reader
                    reader.close();
                } catch (IOException e) {
                    // catch exception
                    e.printStackTrace();
                }
            }
        }
        return employees;
    }

    /**
     * Increase all salary
     */
    private void increaseSalary() {
        // list of employee
        ArrayList<String> employees = getEmploeys();
        // list of updated employee
        ArrayList<String> updatedEmployees = new ArrayList<String>();

        // iterate over
        for (int i = 0; i < employees.size(); i++) {
            // get emploee
            String emploee = employees.get(i);
            //split
            String[] data = emploee.split(",");
            //increase salary (convert str to int and add 100)
            int salary = Integer.parseInt(data[12]) + 100;
            // create new employee
            String row = String.join(",", data[0], data[1], data[2],
                    data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], salary + "", data[13], data[14]);
            // add to new list
            updatedEmployees.add(row);
        }

        // create tmp file
        File tempFile = new File("tempData.csv");

        // write to temp file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
            for (String employee : updatedEmployees) {
                // write
                writer.write(employee);
                // add new line
                writer.newLine();
            }

        } catch (IOException ex) {
            // print exception
            ex.printStackTrace();
            // show error
            JOptionPane.showMessageDialog(this, "Error processing CSV file.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        // delete data file
        File inputFile = new File(fileName);
        //  data file 
        if (!inputFile.delete()) {
            // show error
            JOptionPane.showMessageDialog(this, "Error deleting original file.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // rename tempFile to data file
        if (!tempFile.renameTo(inputFile)) {
            // show error
            JOptionPane.showMessageDialog(this, "Error renaming temp file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        // readed table
        populateDataTable();

        // show message
        JOptionPane.showMessageDialog(this, "Salary increased to all");
    }

    /**
     * Read file and populate table
     */
    private void populateDataTable() {
        // get model from JTable
        DefaultTableModel model = (DefaultTableModel) employeeTable.getModel();
        // reset counter
        model.setRowCount(0);

        // init BufferedReader
        BufferedReader reader = null;
        try {
            // create BufferedReader from fileName
            reader = new BufferedReader(new FileReader(fileName));
            // init line var
            String line;
            // get next line from file
            while ((line = reader.readLine()) != null) {
                // split line
                String[] data = line.split(",");
                // validate that line has 12 attributes
                if (data.length >= 12) {
                    // create model with columns
                    Object[] newRow = {data[0], data[1], data[2], data[3], data[4], data[6], data[10], data[11]};
                    // add row to model
                    model.addRow(newRow);
                }
            }
        } catch (IOException e) {
            // catch exception
            e.printStackTrace();
            // show error
            JOptionPane.showMessageDialog(null, "Error importing table data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            // if reader in exception or just finished - close
            if (reader != null) {
                try {
                    // close reader
                    reader.close();
                } catch (IOException e) {
                    // catch exception
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Read all lines in file and find the max id +1 as next Id
     */
    private void initializeNextId() {
        ArrayList<Integer> ids = new ArrayList<Integer>();

        // set nextId to 1 as init
        nextId = 1;
        // read fileName
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            // create line var
            String line;
            // read line by line
            while ((line = reader.readLine()) != null) {
                // split by ","
                String[] data = line.split(",");
                // parse the first el that is id to int
                int id = Integer.parseInt(data[0]);
                // add to arraylist
                ids.add(id);
            }

        } catch (IOException ex) {
            // cache exception and log
            ex.printStackTrace();
        }
        int maxId = Collections.max(ids);
        // next id is max id +1
        nextId = maxId + 1;
    }

    /**
     * Validate employee fields
     *
     * @param firstName
     * @param middleName
     * @param lastName
     * @param dob
     * @param country
     * @param state
     * @param addressLine1
     * @param zip
     * @param jobType
     * @param position
     * @param salary
     * @param bonuses
     * @param currency
     * @return True is all required fields are populated, otherwise false
     */
    private boolean validateFeilds(String firstName, String middleName, String lastName, String dob, String country, String state,
            String addressLine1, String zip, String jobType, String position, String salary, String bonuses, String currency) {
        // validate all fields are populated missing fields
        if (firstName.isEmpty() || middleName.isEmpty() || lastName.isEmpty() || dob.isEmpty() || country.isEmpty()
                || state.isEmpty() || addressLine1.isEmpty() || zip.isEmpty() || jobType.isEmpty()
                || position.isEmpty() || salary.isEmpty() || bonuses.isEmpty() || currency == null) {

            // error message with missing Fields
            String missingFields = "";
            // if firstName empty
            if (firstName.isEmpty()) {
                // add to missingFields
                missingFields += "First Name, ";
            }
            // if middleName empty
            if (middleName.isEmpty()) {
                // add to missingFields
                missingFields += "Middle Name, ";
            }
            // if lastName empty
            if (lastName.isEmpty()) {
                // add to missingFields
                missingFields += "Last Name, ";
            }
            // if date of birth empty
            if (dob.isEmpty()) {
                // add to missingFields
                missingFields += "Date of Birth, ";
            }
            // if country empty
            if (country.isEmpty()) {
                // add to missingFields
                missingFields += "Country, ";
            }
            // if state empty
            if (state.isEmpty()) {
                // add to missingFields
                missingFields += "State, ";
            }
            // if addressLine1 empty
            if (addressLine1.isEmpty()) {
                // add to missingFields
                missingFields += "Address Line 1, ";
            }
            // if zip empty
            if (zip.isEmpty()) {
                // add to missingFields
                missingFields += "Zip/Postal Code, ";
            }
            // if jobType empty
            if (jobType.isEmpty()) {
                // add to missingFields
                missingFields += "Job Type, ";
            }
            // if position empty
            if (position.isEmpty()) {
                // add to missingFields
                missingFields += "Position, ";
            }
            // if salary empty
            if (salary.isEmpty()) {
                // add to missingFields
                missingFields += "Salary, ";
            }
            // if bonuses empty
            if (bonuses.isEmpty()) {
                // add to missingFields
                missingFields += "Bonuses, ";
            }
            // if currency empty
            if (currency == null) {
                // add to missingFields
                missingFields += "Currency, ";
            }

            // Remove trailing comma and space
            missingFields = missingFields.substring(0, missingFields.length() - 2);
            // show error
            JOptionPane.showMessageDialog(this, "Please fill in the following fields: " + missingFields, "Missing Fields", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        return true;
    }

    /**
     * Add new Employee
     */
    private void addEmployee() {
        // read firstName
        String firstName = addFirstNameInput.getText().trim();
        // read middleName
        String middleName = addMiddleNameInput.getText().trim();
        // read lastName
        String lastName = addLastNameInput.getText().trim();
        // get Data from Date picker
        Date dobDate = addDob.getDate();
        // format date to string if not null
        String dob = dobDate != null ? df.format(dobDate): "";
        // read country
        String country = addCountryInput.getText().trim();
        // read state
        String state = addStateInput.getText().trim();
        // read addressLine1
        String addressLine1 = addAddressLine1Input.getText().trim();
        // read addressLine2
        String addressLine2 = addAddressLine2Input.getText().trim();
        // read zip
        String zip = addZipInput.getText().trim();
        // read jobType
        String jobType = addJobTypeInput.getText().trim();
        // read position
        String position = addPositionInput.getText().trim();
        // read salary
        String salary = addSalaryInput.getText().trim();
        // read bonuses
        String bonuses = addBonuseInput.getText().trim();
        // read currency from drop down
        String currency = (String) addCurrencyInput.getSelectedItem();

        // validate fields
        if (!validateFeilds(firstName, middleName, lastName, dob, country, state,
                addressLine1, zip, jobType, position, salary, bonuses, currency)) {
            return;
        }

        // check that zip code math US or Canada regex
        if (!zip.matches("\\d{5}") && !zip.matches("[A-Za-z]\\d[A-Za-z] ?\\d[A-Za-z]\\d")) {
            // show error
            JOptionPane.showMessageDialog(this, "Zip/Postal Code must be a valid format (e.g., 12345 or A1A 1A1).", "Invalid Zip/Postal Code", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // get emploee id
        int id = nextId++;
        // create data array for employee
        String[] data = {String.valueOf(id), firstName, middleName, lastName, dob, country, state, addressLine1, addressLine2, zip, jobType, position, salary, bonuses, currency};

        // open Writer to file with append
        try (FileWriter writer = new FileWriter(fileName, true)) {
            // create a line with "," from array and write
            writer.append(String.join(",", data));
            // add new line
            writer.append("\n");
            // close file
            writer.close();
            // show exception
            JOptionPane.showMessageDialog(this, "Data successfully saved to CSV.");
            // reread table from file
            populateDataTable();
        } catch (IOException ex) {
            // print exception
            ex.printStackTrace();
            // show error message
            JOptionPane.showMessageDialog(this, "Error saving data to CSV.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Search Employee by id and populate its data
     *
     * @throws ParseException
     */
    private void searchEmployeeById() throws ParseException {
        // get id that user enter
        String searchId = editEmployeeIdInput.getText().trim();

        // if empty
        if (searchId.isEmpty()) {
            // show error
            JOptionPane.showMessageDialog(this, "Please enter an ID to search.", "Missing ID", JOptionPane.WARNING_MESSAGE);
            return;
        }
        // Create reader
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            // define line var
            String line;
            // found var shows if found or not 
            boolean found = false;
            // read lien
            while ((line = reader.readLine()) != null) {
                // split line
                String[] data = line.split(",");
                // if id === searchId - populate swing controlls
                if (data[0].equals(searchId)) {
                    // set first name
                    editFirstNameInput.setText(data[1]);
                    // set middle name
                    editMiddleNameInput.setText(data[2]);
                    // set last name
                    editLastNameInput.setText(data[3]);
                    // create dobDate from string
                    Date dobDate = df.parse(data[4]);
                    // set dob
                    editDob.setDate(dobDate);
                    // set country
                    editCountryInput.setText(data[5]);
                    // set state
                    editStateInput.setText(data[6]);
                    // set addrline1
                    editAddressLine1Input.setText(data[7]);
                    // set addrline2
                    editAddressLine2Input.setText(data[8]);
                    // set zip
                    editZipInput.setText(data[9]);
                    // set job type
                    editJobTypeInput.setText(data[10]);
                    // set position
                    editPositionInput.setText(data[11]);
                    // set salary
                    editSalaryInput.setText(data[12]);
                    // set bonus
                    editBonuseInput.setText(data[13]);
                    //set currency
                    editCurrencyInput.setSelectedItem(data[14]);
                    // set flag to true- found
                    found = true;
                    // stop reading
                    break;
                }
            }
            // not found
            if (!found) {
                // show error
                JOptionPane.showMessageDialog(this, "Employee with ID " + searchId + " not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException ex) {
            // print exception
            ex.printStackTrace();
            // show error
            JOptionPane.showMessageDialog(this, "Error reading CSV file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Update Employee by id
     */
    private void updateEmployeeById() {
        // get employeeId
        String employeeId = editEmployeeIdInput.getText().trim();
        // if no  id 
        if (employeeId.isEmpty()) {
            // hsow error
            JOptionPane.showMessageDialog(this, "Please enter an ID to update.", "Missing ID", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // get firstName
        String firstName = editFirstNameInput.getText().trim();
        // get middleName
        String middleName = editMiddleNameInput.getText().trim();
        // get lastName
        String lastName = editLastNameInput.getText().trim();
        // get dobDate
        Date dobDate = editDob.getDate();
        // format dobDate ad string
        String dob = dobDate != null ? df.format(dobDate): "";
        // get country
        String country = editCountryInput.getText().trim();
        // get state
        String state = editStateInput.getText().trim();
        // get addressLine1
        String addressLine1 = editAddressLine1Input.getText().trim();
        // get addressLine2
        String addressLine2 = editAddressLine2Input.getText().trim();
        // get zip
        String zip = editZipInput.getText().trim();
        //  get jon type
        String jobType = editJobTypeInput.getText().trim();
        // get position
        String position = editPositionInput.getText().trim();
        // get salary
        String salary = editSalaryInput.getText().trim();
        // get bonuses
        String bonuses = editBonuseInput.getText().trim();
        // get currency
        String currency = (String) editCurrencyInput.getSelectedItem();

        // validate fields
        if (!validateFeilds(firstName, middleName, lastName, dob, country, state,
                addressLine1, zip, jobType, position, salary, bonuses, currency)) {
            return;
        }

        // File with data
        File inputFile = new File(fileName);
        // tmp file
        File tempFile = new File("tempData.csv");

        // open data file and tmp file
        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile)); BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
            // define line
            String line;
            // found boolean
            boolean found = false;
            // red line
            while ((line = reader.readLine()) != null) {
                // split
                String[] data = line.split(",");
                // if not found line
                if (!data[0].equals(employeeId)) {
                    // print as is
                    writer.write(line);
                    // print new line
                    writer.newLine();
                } else {
                    // update line -create new line w data
                    writer.write(String.join(",", employeeId, firstName, middleName, lastName, dob, country, state, addressLine1, addressLine2, zip, jobType, position, salary, bonuses, currency));
                    // print new line
                    writer.newLine();
                    // found = true
                    found = true;
                }
            }

            // if found
            if (found) {
                // show message
                JOptionPane.showMessageDialog(this, "Employee with ID " + employeeId + " updated successfully.");
                // clear edit fields
                clearEditFields();
            } else {
                // show error
                JOptionPane.showMessageDialog(this, "No employee found with ID: " + employeeId, "Not Found", JOptionPane.WARNING_MESSAGE);
            }

        } catch (IOException ex) {
            // print exception
            ex.printStackTrace();
            // show error
            JOptionPane.showMessageDialog(this, "Error processing CSV file.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        // delete data file
        if (!inputFile.delete()) {
            // show error
            JOptionPane.showMessageDialog(this, "Error deleting original file.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // rename tmp file to data
        if (!tempFile.renameTo(inputFile)) {
            // show error
            JOptionPane.showMessageDialog(this, "Error renaming temp file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        // reread table 
        populateDataTable();
    }

    /**
     * Clear all edit fields after operation
     */
    private void clearEditFields() {
        // empty first name
        editFirstNameInput.setText("");
        // empty middle name
        editMiddleNameInput.setText("");
        // empty last name
        editLastNameInput.setText("");
        // clean dob control
        editDob.setCalendar(null);
        // clean country
        editCountryInput.setText("");
        // empty state
        editStateInput.setText("");
        // empty addrline1
        editAddressLine1Input.setText("");
        // empty addrline2
        editAddressLine2Input.setText("");
        // empty zip
        editZipInput.setText("");
        // empty job type
        editJobTypeInput.setText("");
        // empty position
        editPositionInput.setText("");
        // empty salary
        editSalaryInput.setText("");
        // empty bonus
        editBonuseInput.setText("");
        // deselect currency
        editCurrencyInput.setSelectedIndex(-1);
    }

    /**
     * Delete employee by id
     */
    private void deleteEmployeeById() {
        // get id
        String deleteId = editEmployeeIdInput.getText().trim();
        // if no delete id 
        if (deleteId.isEmpty()) {
            // hsow error
            JOptionPane.showMessageDialog(this, "Please enter an ID to delete.", "Missing ID", JOptionPane.WARNING_MESSAGE);
            return;
        }
        // found boolean if employee found
        boolean found = false;

        // employee to delete (should find)
        String empToDelete = "";
        // get list of emplyees
        ArrayList<String> employees = getEmploeys();
        // iterate over
        for (int i = 0; i < employees.size(); i++) {
            // get emploee
            String emploee = employees.get(i);
            // split line
            String[] data = emploee.split(",");
            // if equal
            if (data[0].equals(deleteId)) {
                // assign empToDelete
                empToDelete = emploee;
                // set found
                found = true;
                // stop search
                break;
            }
        }
        // if found empty swing controls
        if (found) {
            // sho confirmation message
            JOptionPane.showMessageDialog(this, "Employee with ID " + deleteId + " deleted successfully.");
            // clear edit fields
            clearEditFields();
        } else {
            // show error
            JOptionPane.showMessageDialog(this, "No employee found with ID: " + deleteId, "Not Found", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // remove emploee from ArrayList    
        employees.remove(empToDelete);

        // cread data file 
        File inputFile = new File(fileName);
        // create tmp file
        File tempFile = new File("tempData.csv");

        // open data file and tmp file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
            // iterate over arraylist
            employees.forEach(line -> {
                try {
                    // write
                    writer.write(line);
                    // add new line
                    writer.newLine();
                } catch (IOException ex) {
                    Logger.getLogger(EmployeeRecordApplication.class.getName()).log(Level.SEVERE, null, ex);
                }

            });
        } catch (IOException ex) {
            // print exception
            ex.printStackTrace();
            // show error
            JOptionPane.showMessageDialog(this, "Error processing CSV file.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        // delete data file
        if (!inputFile.delete()) {
            // show error
            JOptionPane.showMessageDialog(this, "Error deleting original file.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // rename tempFile to data file
        if (!tempFile.renameTo(inputFile)) {
            // show error
            JOptionPane.showMessageDialog(this, "Error renaming temp file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        // readed table
        populateDataTable();
    }

    /**
     * Log data file to console
     */
    private void logCsvFile() {
        // open reader
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            // define line
            String line;
            // read line
            while ((line = reader.readLine()) != null) {
                // print line
                System.out.println(line);
            }
        } catch (IOException ex) {
            // print exception
            ex.printStackTrace();
            // show error
            JOptionPane.showMessageDialog(this, "Error reading CSV file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Filter table
     *
     * @param columnName - column name
     * @param value - value to find
     */
    private void filterData(String columnName, String value) {
        // create map col name to index column in data file
        Map<String, Integer> columnIndexMap = new HashMap<>();
        // add "First name" - column 1
        columnIndexMap.put("First name", 1);
        // add "Middle name" - column 2
        columnIndexMap.put("Middle name", 2);
        // add "Last name" - column 2
        columnIndexMap.put("Last name", 3);
        // add "Date of Birth" - column 4
        columnIndexMap.put("Date of birth", 4);
        // add "State/Province" - column 6
        columnIndexMap.put("State / Province", 6);
        // add "Job Type"" - column 10
        columnIndexMap.put("Job type", 10);
        // add "Position" - column 11
        columnIndexMap.put("Position", 11);

        // Ref to reader
        BufferedReader reader = null;
        // List of records that match search
        List<Object[]> matchingRows = new ArrayList<>();

        try {
            // create reader
            reader = new BufferedReader(new FileReader(fileName));
            // Ref to line
            String line;
            // Get col index by name
            Integer columnIndex = columnIndexMap.get(columnName);

            // just in case wrong arg - error
            if (columnIndex == null) {
                System.out.println("Invalid column name: " + columnName);
                return;
            }

            // read line
            while ((line = reader.readLine()) != null) {
                // split line
                String[] data = line.split(",");
                // line should have  12 slit values (just to protect)

                // check if value === data in column
                if (data[columnIndex].equalsIgnoreCase(value)) {
                    // if yes - create a new row
                    Object[] newRow = {data[0], data[1], data[2], data[3], data[4], data[6], data[10], data[11]};
                    // add row
                    matchingRows.add(newRow);
                }
            }

            // Get model
            DefaultTableModel model = (DefaultTableModel) employeeTable.getModel();
            // reset # colun number
            model.setRowCount(0);
            // go over rows
            for (Object[] row : matchingRows) {
                // add row
                model.addRow(row);
            }

        } catch (IOException e) {
            // print exception
            e.printStackTrace();
            // show error
            JOptionPane.showMessageDialog(null, "Error importing table data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (reader != null) {
                try {
                    // close reader 
                    reader.close();
                } catch (IOException e) {
                    // print exception
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Event handler for delete Employee button
     *
     * @param evt
     */
    private void deleteEmplyeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEmplyeeBtnActionPerformed
        // do delete
        deleteEmployeeById();
    }//GEN-LAST:event_deleteEmplyeeBtnActionPerformed

    /**
     * Event handler for displaying add Employee panel
     *
     * @param evt
     */
    private void addEmplyeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmplyeeBtnActionPerformed
        // cal next id
        initializeNextId();
        // add empoyee
        addEmployee();
        // log data
        logCsvFile();
    }//GEN-LAST:event_addEmplyeeBtnActionPerformed

    /**
     * Event handler for displaying edit Employee panel
     *
     * @param evt
     */
    private void editSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSearchBtnActionPerformed
        try {
            // search empoyee
            searchEmployeeById();
            // log data
            logCsvFile();
        } catch (ParseException ex) {
            ex.printStackTrace();
            // show excpetion
            Logger.getLogger(EmployeeRecordApplication.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_editSearchBtnActionPerformed

    /**
     * Event handler for update employee button
     *
     * @param evt
     */
    private void updateEmployeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateEmployeeBtnActionPerformed
        // call update functiion
        updateEmployeeById();
    }//GEN-LAST:event_updateEmployeeBtnActionPerformed

    /**
     * Event handler for search value in table
     *
     * @param evt
     */
    private void searchValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchValueActionPerformed
        // get searchText
        String searchText = searchValue.getText().trim();
        // get column for search
        String selectedColumn = (String) searchSelect.getSelectedItem();

        // check that both are populated
        if (selectedColumn == null || selectedColumn.isEmpty() || "Select a value".equals(selectedColumn)) {
            JOptionPane.showMessageDialog(this, "Please select a valid column to search in.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // do search
        filterData(selectedColumn, searchText);
    }//GEN-LAST:event_searchValueActionPerformed

    /**
     * Event handler for clear search value - read all data in the table
     *
     * @param evt
     */
    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        populateDataTable();
    }//GEN-LAST:event_clearBtnActionPerformed

    /**
     * Event handler for salary increase
     *
     * @param evt
     */
    private void salaryIncreaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salaryIncreaseActionPerformed
        increaseSalary();

    }//GEN-LAST:event_salaryIncreaseActionPerformed

    /**
     * Event handler to count people
     *
     * @param evt
     */
    private void countActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countActionPerformed
        // TODO add your handling code here:
        showCount();
    }//GEN-LAST:event_countActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeRecordApplication.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeRecordApplication.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeRecordApplication.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeRecordApplication.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeRecordApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addAddressLine1Input;
    private javax.swing.JTextField addAddressLine2Input;
    private javax.swing.JTextField addBonuseInput;
    private javax.swing.JTextField addCountryInput;
    private javax.swing.JComboBox<String> addCurrencyInput;
    private com.toedter.calendar.JDateChooser addDob;
    private javax.swing.JButton addEmplyeeBtn;
    private javax.swing.JTextField addFirstNameInput;
    private javax.swing.JTextField addJobTypeInput;
    private javax.swing.JTextField addLastNameInput;
    private javax.swing.JTextField addMiddleNameInput;
    private javax.swing.JTextField addPositionInput;
    private javax.swing.JTextField addSalaryInput;
    private javax.swing.JTextField addStateInput;
    private javax.swing.JTextField addZipInput;
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton deleteEmplyeeBtn;
    private javax.swing.JTextField editAddressLine1Input;
    private javax.swing.JTextField editAddressLine2Input;
    private javax.swing.JTextField editBonuseInput;
    private javax.swing.JTextField editCountryInput;
    private javax.swing.JComboBox<String> editCurrencyInput;
    private com.toedter.calendar.JDateChooser editDob;
    private javax.swing.JTextField editEmployeeIdInput;
    private javax.swing.JTextField editFirstNameInput;
    private javax.swing.JTextField editJobTypeInput;
    private javax.swing.JTextField editLastNameInput;
    private javax.swing.JTextField editMiddleNameInput;
    private javax.swing.JTextField editPositionInput;
    private javax.swing.JTextField editSalaryInput;
    private javax.swing.JButton editSearchBtn;
    private javax.swing.JTextField editStateInput;
    private javax.swing.JTextField editZipInput;
    private javax.swing.JTable employeeTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton resetAddBtn;
    private javax.swing.JComboBox<String> searchSelect;
    private javax.swing.JTextField searchValue;
    private javax.swing.JButton updateEmployeeBtn;
    // End of variables declaration//GEN-END:variables
}
